@page "/newpage"
@using System.Diagnostics
@* @implements IAsyncDisposable *@

<div class="cus-body">
    <h3 id="c-h3">Progress bar.</h3>
    <button class="cus-btn" type="button" onclick=@(async ()=>RefreshData())>Nhấn để thay đổi giá trị</button>

    <div class="container-test">
        <div class="skill-box">
            <span class="title">HTML</span>

            <div class="skill-bar">
                <span id="prog1" class="skill-per css" style="width:50%">
                    <span class="cus-tooltip">@_html%</span>
                </span>
            </div>
        </div>
    </div>
    <div class="container-test">
        <div class="skill-box">
            <span class="title">CSS</span>

            <div class="skill-bar">
                <span id="prog2" class="skill-per css" style="width:50%">
                    <span class="cus-tooltip">@_css%</span>
                </span>
            </div>
        </div>
    </div>
</div>

@code {
    double _html = 0;
    double _css = 10;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
    }

    private async void RefreshData()
    {
        try
        {
            _html += 10;
            _css += 10;

            if (_html >= 101) _html = 0;
            if (_css >= 101) _css = 10;

            await _jsRuntime.InvokeVoidAsync("ChangeValue", "prog1", $"{_html}%");
            await _jsRuntime.InvokeVoidAsync("ChangeValue", "prog2", $"{_css}%");

            StateHasChanged(); // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.ToString());
        }
    }
}